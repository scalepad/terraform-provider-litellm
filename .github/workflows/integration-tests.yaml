name: Integration Tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Use minimal permissions following principle of least privilege
permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      test-dirs: ${{ steps.find-tests.outputs.test-dirs }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find test directories
        id: find-tests
        run: |
          # Find all test directories that contain main.tf files
          test_dirs=$(find tests -name "main.tf" -type f | sed 's|/main.tf||' | jq -R -s -c 'split("\n")[:-1]')
          echo "Found test directories: $test_dirs"
          echo "test-dirs=$test_dirs" >> $GITHUB_OUTPUT

  integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.setup.outputs.test-dirs != '[]'

    strategy:
      fail-fast: false
      matrix:
        test-dir: ${{ fromJson(needs.setup.outputs.test-dirs) }}

    env:
      # Database configuration
      POSTGRES_DB: litellm_test
      POSTGRES_USER: litellm_user
      POSTGRES_PASSWORD: litellm_password

      # LiteLLM configuration
      LITELLM_MASTER_KEY: sk-test-master-key-12345
      LITELLM_SALT_KEY: sk-test-salt-key-67890
      UI_USERNAME: admin
      UI_PASSWORD: admin123

      # Test API keys (using dummy values for integration tests)
      OPENAI_API_KEY: sk-test-openai-key
      ANTHROPIC_API_KEY: sk-test-anthropic-key

      # Provider configuration
      LITELLM_API_BASE: http://localhost:4000
      LITELLM_API_KEY: sk-test-master-key-12345

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"

      - name: Build and install Terraform provider
        run: |
          echo "Building & Installing Terraform provider ..."
          make install
        env:
          OS_ARCH: linux_amd64

      - name: Start LiteLLM with Docker Compose
        uses: hoverkraft-tech/compose-action@v2.3.0
        with:
          compose-file: "./docker/docker-compose.yml"
          up-flags: "--build"
          down-flags: "--volumes"
        env:
          POSTGRES_DB: litellm_test
          POSTGRES_USER: litellm_user
          POSTGRES_PASSWORD: litellm_password
          LITELLM_MASTER_KEY: sk-test-master-key-12345
          LITELLM_SALT_KEY: sk-test-salt-key-67890
          UI_USERNAME: admin
          UI_PASSWORD: admin123

      - name: Wait for LiteLLM to be healthy
        run: |
          echo "Waiting for LiteLLM to be healthy..."
          timeout=300  # 5 minutes timeout
          elapsed=0
          interval=10

          while [ $elapsed -lt $timeout ]; do
            if curl -f -s http://localhost:4000/health/liveliness > /dev/null 2>&1; then
              echo "LiteLLM is healthy!"
              break
            fi
            
            echo "Waiting for LiteLLM to be ready... (${elapsed}s/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
            
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout waiting for LiteLLM to be healthy"
              echo "=== LiteLLM Logs ==="
              docker logs litellm || true
              echo "=== Database Logs ==="
              docker logs litellm_db || true
              exit 1
            fi
          done

      - name: Verify LiteLLM API
        run: |
          echo "Testing LiteLLM API endpoints..."

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:4000/health/liveliness

          # Test models endpoint
          echo "Testing models endpoint..."
          curl -f -H "Authorization: Bearer sk-test-master-key-12345" \
               http://localhost:4000/v1/models

          # Test key creation endpoint
          echo "Testing key creation..."
          response=$(curl -s -X POST http://localhost:4000/key/generate \
            -H "Authorization: Bearer sk-test-master-key-12345" \
            -H "Content-Type: application/json" \
            -d '{
              "models": ["gpt-4"],
              "max_budget": 10.0,
              "duration": "30d"
            }')

          echo "Key creation response: $response"
          echo "Test API key created successfully"

      - name: Run Integration Test - ${{ matrix.test-dir }}
        run: |
          test_dir="${{ matrix.test-dir }}"
          test_name=$(basename "$test_dir")

          echo "Running $test_name integration tests..."
          cd "$test_dir"

          echo "Initializing Terraform..."
          terraform init

          echo "Validating Terraform configuration..."
          terraform validate

          echo "Planning Terraform deployment..."
          terraform plan -out=tfplan

          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan

          echo "Verifying outputs..."
          terraform output

          # Store outputs for verification
          terraform output -json > outputs.json

          echo "Testing resource updates..."
          terraform plan -out=tfplan-update
          terraform apply -auto-approve tfplan-update

          echo "Testing resource destruction..."
          terraform destroy -auto-approve

          cd - > /dev/null

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "=== Cleanup on failure ==="

          echo "=== LiteLLM Logs ==="
          docker logs litellm || true

          echo "=== Database Logs ==="
          docker logs litellm_db || true

          echo "=== Docker Container Status ==="
          docker ps -a || true

          echo "=== Terraform States ==="
          find tests -name "terraform.tfstate" -exec echo "=== {} ===" \; -exec cat {} \; || true

          echo "=== Cleaning up any remaining resources ==="
          test_dir="${{ matrix.test-dir }}"
          if [ -d "$test_dir" ] && [ -f "$test_dir/main.tf" ]; then
            echo "Cleaning up $test_dir"
            cd "$test_dir"
            terraform destroy -auto-approve || true
            cd - > /dev/null
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up test environment..."

          # Cleanup any remaining Terraform resources for this test
          test_dir="${{ matrix.test-dir }}"
          if [ -d "$test_dir" ] && [ -f "$test_dir/main.tf" ]; then
            echo "Cleaning up $test_dir"
            cd "$test_dir"
            terraform destroy -auto-approve || true
            cd - > /dev/null
          fi

          echo "Cleanup completed"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-artifacts-${{ matrix.test-dir }}
          path: |
            ${{ matrix.test-dir }}/outputs.json
            ${{ matrix.test-dir }}/terraform.tfstate
            ${{ matrix.test-dir }}/*.log
          retention-days: 7
